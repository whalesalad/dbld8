working_directory "<%= current_path %>"
pid "<%= unicorn_pid %>"
stderr_path "<%= unicorn_log %>"
stdout_path "<%= unicorn_log %>"
listen "/tmp/unicorn.<%= application %>.sock"
worker_processes <%= unicorn_workers %>
timeout 30
preload_app true

before_fork do |server, worker|
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.connection.disconnect!

  old_pid = "<%= unicorn_pid %>.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end

after_fork do |server, worker|
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.establish_connection

  if defined?(Metriks::Reporter::LibratoMetrics)
    reporter = Metriks::Reporter::LibratoMetrics.new(Rails.configuration.librato['user'], Rails.configuration.librato['token'], on_error: proc { |e| Rails.logger.info("LibratoMetrics: #{ e.message }") })
    reporter.start
  end

  defined?(AnalyticsRuby) and
    Analytics.init(
      secret: Rails.configuration.segment_io_secret,
      on_error: Rails.configuration.segment_io_error
    )

  Sidekiq.configure_client do |config|
    config.redis = { 
      :url => "#{Rails.configuration.redis_url}/12", 
      :namespace => 'sidekiq' 
    }
  end
end

